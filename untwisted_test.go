package brainpool

import (
	"crypto/elliptic"
	"math/big"
	"testing"
)

type transformTest struct {
	curve  elliptic.Curve
	gx      string // base point of the untwisted curve
	gy      string
}

var transformTests = []transformTest{
	{
		P160r1(),
		"BED5AF16EA3F6A4F62938C4631EB5AF7BDBCDBC3",
		"1667CB477A1A8EC338F94741669C976316DA6321",
	}, {
		P192r1(),
		"C0A0647EAAB6A48753B033C56CB0F0900A2F5C4853375FD6",
		"14B690866ABD5BB88B5F4828C1490002E6773FA2FA299B8F",
	}, {
		P224r1(),
		"D9029AD2C7E5CF4340823B2A87DC68C9E4CE3174C1E6EFDEE12C07D",
		"58AA56F772C0726F24C6B89E4ECDAC24354B9E99CAA3F6D3761402CD",
	}, {
		P256r1(),
		"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262",
		"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997",
	}, {
		P320r1(),
		"43BD7E9AFB53D8B85289BCC48EE5BFE6F20137D10A087EB6E7871E2A10A599C710AF8D0D39E20611",
		"14FDD05545EC1CC8AB4093247F77275E0743FFED117182EAA9C77877AAAC6AC7D35245D1692E8EE1",
	}, {
		P384r1(),
		"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E",
		"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315",
	}, {
		P512r1(),
		"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822",
		"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892",
	},
}

func TestTransformBasepoint(t *testing.T) {
	for i, tc := range transformTests {
		curve := tc.curve.(*bpcurve)
		x, _ := new(big.Int).SetString(tc.gx, 16)
		y, _ := new(big.Int).SetString(tc.gy, 16)

		tx, ty := curve.toTwisted(x, y)

		if tx.Cmp(curve.twisted.Params().Gx) != 0 ||
		   ty.Cmp(curve.twisted.Params().Gy) != 0 {
			   t.Errorf("%d toTwisted(Gx,Gy) doesn't match twisted curves basepoint", i)
		}

		xx, yy := curve.fromTwisted(tx, ty)

		if x.Cmp(xx) != 0 ||
		   y.Cmp(yy) != 0 {
			   t.Errorf("%d fromTwisted(toTwisted(x,y)) != x,y", i)
		}
	}
}
